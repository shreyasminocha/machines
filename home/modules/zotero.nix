# https://github.com/misumisumi/flakes/blob/2a4555109a974262aea3550d1f979a53a8c7377a/modules/home-manager/zotero.nix
{
  config,
  lib,
  pkgs,
  ...
}:
with lib;
let
  inherit (pkgs.stdenv.hostPlatform) isDarwin;

  cfg = config.programs.zotero;

  jsonFormat = pkgs.formats.json { };

  zoteroConfigPath = if isDarwin then "Library/Application Support/Zotero" else ".zotero/zotero";

  profilesPath = if isDarwin then "${zoteroConfigPath}/Profiles" else zoteroConfigPath;

  # The extensions path shared by all profiles; will not be supported
  # by future Zotero versions.
  extensionPath = "extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}";

  profiles =
    flip mapAttrs' cfg.profiles (
      _: profile:
      nameValuePair "Profile${toString profile.id}" {
        Name = profile.name;
        Path = if isDarwin then "Profiles/${profile.path}" else profile.path;
        IsRelative = 1;
        Default = if profile.isDefault then 1 else 0;
      }
    )
    // {
      General = {
        StartWithLastProfile = 1;
      };
    };

  profilesIni = generators.toINI { } profiles;

  userPrefValue =
    pref:
    builtins.toJSON (if isBool pref || isInt pref || isString pref then pref else builtins.toJSON pref);

  mkUserJs = prefs: extraPrefs: ''
    // Generated by Home Manager.

    ${concatStrings (
      mapAttrsToList (name: value: ''
        user_pref("${name}", ${userPrefValue value});
      '') prefs
    )}

    ${extraPrefs}
  '';

  mkNoDuplicateAssertion =
    entities: entityKind:
    (
      let
        # Return an attribute set with entity IDs as keys and a list of
        # entity names with corresponding ID as value. An ID is present in
        # the result only if more than one entity has it. The argument
        # entities is a list of AttrSet of one id/name pair.
        findDuplicateIds =
          entities: filterAttrs (_entityId: entityNames: length entityNames != 1) (zipAttrs entities);

        duplicates = findDuplicateIds (
          mapAttrsToList (entityName: entity: { "${toString entity.id}" = entityName; }) entities
        );

        mkMsg = entityId: entityNames: "  - ID ${entityId} is used by " + concatStringsSep ", " entityNames;
      in
      {
        assertion = duplicates == { };
        message = ''
          Must not have a Zotero ${entityKind} with an existing ID but
        ''
        + concatStringsSep "\n" (mapAttrsToList mkMsg duplicates);
      }
    );

in
{
  options = {
    programs.zotero = {
      enable = mkEnableOption "Zotero";

      package = mkOption {
        type = with types; nullOr package;
        default = pkgs.zotero;
        defaultText = literalExpression "pkgs.zotero";
        example = literalExpression ''
          pkgs.zotero-bete # if use zotero 7
          pkgs.zotero # if use zotero 6
        '';
        description = ''
          The Zotero package to use.
          If you want to use Zotero 7, set to `pkgs.zotero-bete`.
          Set to `null` to disable installing Zotero.
        '';
      };

      profiles = mkOption {
        type = types.attrsOf (
          types.submodule (
            { config, name, ... }:
            {
              options = {
                name = mkOption {
                  type = types.str;
                  default = name;
                  description = "Profile name.";
                };

                id = mkOption {
                  type = types.ints.unsigned;
                  default = 0;
                  description = ''
                    Profile ID. This should be set to a unique number per profile.
                  '';
                };

                settings = mkOption {
                  type = types.attrsOf (
                    jsonFormat.type
                    // {
                      description = "Zotero preference (int, bool, string, and also attrs, list, float as a JSON string)";
                    }
                  );
                  default = { };
                  example = literalExpression ''
                    {
                      "font.name-list.monospace.ja" = "monospace";
                    }
                  '';
                  description = ''
                    Attribute set of Zotero preferences.

                    Zotero only supports int, bool, and string types for
                    preferences, but home-manager will automatically
                    convert all other JSON-compatible values into strings.
                    See all preferences to Edit -> Preferences -> Advanced -> Advanced Configuration -> Config Editor
                  '';
                };

                extraConfig = mkOption {
                  type = types.lines;
                  default = "";
                  description = ''
                    Extra preferences to add to {file}`user.js`.
                  '';
                };

                path = mkOption {
                  type = types.str;
                  default = name;
                  description = "Profile path.";
                };

                isDefault = mkOption {
                  type = types.bool;
                  default = config.id == 0;
                  defaultText = "true if profile ID is 0";
                  description = "Whether this is a default profile.";
                };

                extensions = mkOption {
                  type = types.listOf types.package;
                  default = [ ];
                  example = literalExpression ''
                    with pkgs.zotero-addons; [
                      privacy-badger
                    ]
                  '';
                  description = ''
                    List of Zotero add-on packages to install for this profile.
                    Some pre-packaged add-ons are accessible from the
                    [misumisumi/flakes](https://github.com/misumisumi/flakes).

                    ```console
                    $ nix search github:misumisumi/flakes zotero-addons
                    ```

                    to list the available Zotero add-ons.
                  '';
                };

              };
            }
          )
        );
        default = { };
        description = "Attribute set of Zotero profiles.";
      };

    };
  };

  config = mkIf cfg.enable {
    assertions = [
      (
        let
          defaults = catAttrs "name" (filter (a: a.isDefault) (attrValues cfg.profiles));
        in
        {
          assertion = cfg.profiles == { } || length defaults == 1;
          message =
            "Must have exactly one default Firefox profile but found "
            + toString (length defaults)
            + optionalString (length defaults > 1) (", namely " + concatStringsSep ", " defaults);
        }
      )

      (mkNoDuplicateAssertion cfg.profiles "profile")
    ];

    warnings = optional (cfg.enableGnomeExtensions or false) ''
      Using 'programs.firefox.enableGnomeExtensions' has been deprecated and
      will be removed in the future. Please change to overriding the package
      configuration using 'programs.firefox.package' instead. You can refer to
      its example for how to do this.
    '';

    home.packages = lib.optional (cfg.package != null) cfg.package;

    home.file = mkMerge (
      [
        {
          "${zoteroConfigPath}/profiles.ini" = mkIf (cfg.profiles != { }) { text = profilesIni; };
        }
      ]
      ++ flip mapAttrsToList cfg.profiles (
        _: profile: {
          "${profilesPath}/${profile.path}/.keep".text = "";

          "${profilesPath}/${profile.path}/user.js" =
            mkIf (profile.settings != { } || profile.extraConfig != "")
              {
                text = mkUserJs profile.settings profile.extraConfig;
              };

          "${profilesPath}/${profile.path}/extensions" = mkIf (profile.extensions != [ ]) {
            source =
              let
                extensionsEnvPkg = pkgs.buildEnv {
                  name = "hm-zotero-extensions";
                  paths = profile.extensions;
                };
              in
              "${extensionsEnvPkg}/share/zotero/${extensionPath}";
            recursive = true;
            force = true;
          };
        }
      )
    );
  };
}
